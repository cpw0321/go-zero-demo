// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	seriesFieldNames          = builder.RawFieldNames(&Series{})
	seriesRows                = strings.Join(seriesFieldNames, ",")
	seriesRowsExpectAutoSet   = strings.Join(stringx.Remove(seriesFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	seriesRowsWithPlaceHolder = strings.Join(stringx.Remove(seriesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	seriesModel interface {
		Insert(ctx context.Context, data *Series) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Series, error)
		Update(ctx context.Context, data *Series) error
		Delete(ctx context.Context, id string) error
	}

	defaultSeriesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Series struct {
		Id          string         `db:"id"`           // ID
		AppId       string         `db:"app_id"`       // 应用id
		Issuer      string         `db:"issuer"`       // IP
		Name        string         `db:"name"`         // 名称
		Description sql.NullString `db:"description"`  // 描述
		ExternalUrl sql.NullString `db:"external_url"` // 外部链接
		CreateTime  time.Time      `db:"create_time"`  // 创建时间
	}
)

func newSeriesModel(conn sqlx.SqlConn) *defaultSeriesModel {
	return &defaultSeriesModel{
		conn:  conn,
		table: "`series`",
	}
}

func (m *defaultSeriesModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSeriesModel) FindOne(ctx context.Context, id string) (*Series, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", seriesRows, m.table)
	var resp Series
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSeriesModel) Insert(ctx context.Context, data *Series) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, seriesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.AppId, data.Issuer, data.Name, data.Description, data.ExternalUrl)
	return ret, err
}

func (m *defaultSeriesModel) Update(ctx context.Context, data *Series) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, seriesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.AppId, data.Issuer, data.Name, data.Description, data.ExternalUrl, data.Id)
	return err
}

func (m *defaultSeriesModel) tableName() string {
	return m.table
}
